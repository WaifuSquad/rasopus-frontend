/* tslint:disable */
/* eslint-disable */
/**
 * rasopus
 * The Rasopus URL shortener backend
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * @type MayFailError
 * MayFail Error Response
 * @export
 */
export type MayFailError = MayFailErrorOneOf | MayFailErrorOneOf1 | string;

/**
 * This value occurs on error B
 * @export
 * @interface MayFailErrorOneOf
 */
export interface MayFailErrorOneOf {
    /**
     * 
     * @type {number}
     * @memberof MayFailErrorOneOf
     */
    'b': number;
}
/**
 * This value occurs on error C
 * @export
 * @interface MayFailErrorOneOf1
 */
export interface MayFailErrorOneOf1 {
    /**
     * 
     * @type {MayFailErrorOneOf1C}
     * @memberof MayFailErrorOneOf1
     */
    'c': MayFailErrorOneOf1C;
}
/**
 * 
 * @export
 * @interface MayFailErrorOneOf1C
 */
export interface MayFailErrorOneOf1C {
    /**
     * 
     * @type {number}
     * @memberof MayFailErrorOneOf1C
     */
    'val1': number;
    /**
     * 
     * @type {number}
     * @memberof MayFailErrorOneOf1C
     */
    'val2': number;
}
/**
 * MayFail Success Response
 * @export
 * @interface MayFailSuccess
 */
export interface MayFailSuccess {
    /**
     * 
     * @type {number}
     * @memberof MayFailSuccess
     */
    'a': number;
    /**
     * 
     * @type {number}
     * @memberof MayFailSuccess
     */
    'b': number;
    /**
     * 
     * @type {number}
     * @memberof MayFailSuccess
     */
    'c': number;
}
/**
 * MayNotFind Found Response
 * @export
 * @interface MayNotFindFound
 */
export interface MayNotFindFound {
    /**
     * 
     * @type {string}
     * @memberof MayNotFindFound
     */
    'message': string;
}
/**
 * @type TestEnum
 * This is how an enum looks like
 * @export
 */
export type TestEnum = TestEnumOneOf | TestEnumOneOf1 | TestEnumOneOf2 | TestEnumOneOf3 | string;

/**
 * When there is one integer
 * @export
 * @interface TestEnumOneOf
 */
export interface TestEnumOneOf {
    /**
     * 
     * @type {number}
     * @memberof TestEnumOneOf
     */
    'oneInteger': number;
}
/**
 * When there is one long
 * @export
 * @interface TestEnumOneOf1
 */
export interface TestEnumOneOf1 {
    /**
     * 
     * @type {number}
     * @memberof TestEnumOneOf1
     */
    'oneLong': number;
}
/**
 * When there is one boolean
 * @export
 * @interface TestEnumOneOf2
 */
export interface TestEnumOneOf2 {
    /**
     * 
     * @type {boolean}
     * @memberof TestEnumOneOf2
     */
    'oneBoolean': boolean;
}
/**
 * When there are two strings
 * @export
 * @interface TestEnumOneOf3
 */
export interface TestEnumOneOf3 {
    /**
     * 
     * @type {TestEnumOneOf3TwoStrings}
     * @memberof TestEnumOneOf3
     */
    'twoStrings': TestEnumOneOf3TwoStrings;
}
/**
 * 
 * @export
 * @interface TestEnumOneOf3TwoStrings
 */
export interface TestEnumOneOf3TwoStrings {
    /**
     * 
     * @type {string}
     * @memberof TestEnumOneOf3TwoStrings
     */
    'first': string;
    /**
     * 
     * @type {string}
     * @memberof TestEnumOneOf3TwoStrings
     */
    'second': string;
}
/**
 * This is how a struct looks like
 * @export
 * @interface TestStruct
 */
export interface TestStruct {
    /**
     * 
     * @type {number}
     * @memberof TestStruct
     */
    'someNumber': number;
    /**
     * 
     * @type {number}
     * @memberof TestStruct
     */
    'anotherNumber': number;
    /**
     * 
     * @type {number}
     * @memberof TestStruct
     */
    'youGetIt': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns \"Hello, world!\".
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexIndex: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get some data, but it may fail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mayFailMayFail: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/may_fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a cool struct, but it may not be found
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mayNotFindMayNotFind: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/may_not_find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This will always return a `TestEnum`. It can\'t fail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTestEnum: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test_enum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This will always return a `TestStruct`. It can\'t fail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTestStruct: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test_struct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns \"Hello, world!\".
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexIndex(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexIndex(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.indexIndex']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get some data, but it may fail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mayFailMayFail(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MayFailSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mayFailMayFail(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.mayFailMayFail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a cool struct, but it may not be found
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mayNotFindMayNotFind(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MayNotFindFound>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mayNotFindMayNotFind(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.mayNotFindMayNotFind']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This will always return a `TestEnum`. It can\'t fail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testTestEnum(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestEnum>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testTestEnum(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.testTestEnum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This will always return a `TestStruct`. It can\'t fail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testTestStruct(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestStruct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testTestStruct(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.testTestStruct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Returns \"Hello, world!\".
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexIndex(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.indexIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * Get some data, but it may fail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mayFailMayFail(options?: RawAxiosRequestConfig): AxiosPromise<MayFailSuccess> {
            return localVarFp.mayFailMayFail(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a cool struct, but it may not be found
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mayNotFindMayNotFind(options?: RawAxiosRequestConfig): AxiosPromise<MayNotFindFound> {
            return localVarFp.mayNotFindMayNotFind(options).then((request) => request(axios, basePath));
        },
        /**
         * This will always return a `TestEnum`. It can\'t fail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTestEnum(options?: RawAxiosRequestConfig): AxiosPromise<TestEnum> {
            return localVarFp.testTestEnum(options).then((request) => request(axios, basePath));
        },
        /**
         * This will always return a `TestStruct`. It can\'t fail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTestStruct(options?: RawAxiosRequestConfig): AxiosPromise<TestStruct> {
            return localVarFp.testTestStruct(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns \"Hello, world!\".
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public indexIndex(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).indexIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get some data, but it may fail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mayFailMayFail(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).mayFailMayFail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a cool struct, but it may not be found
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mayNotFindMayNotFind(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).mayNotFindMayNotFind(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This will always return a `TestEnum`. It can\'t fail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testTestEnum(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testTestEnum(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This will always return a `TestStruct`. It can\'t fail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testTestStruct(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testTestStruct(options).then((request) => request(this.axios, this.basePath));
    }
}



